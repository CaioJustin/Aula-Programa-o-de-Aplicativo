package system;import javax.swing.*;import java.util.ArrayList;import java.util.List;public class SistemaOnibus {		 // Listas estáticas para armazenar funcionários, ônibus e linhas    private static List<Funcionario> funcionarios = new ArrayList<>();    private static List<Onibus> onibusList = new ArrayList<>();    private static List<Linha> linhas = new ArrayList<>();    private static JTextArea textarea = new JTextArea(20, 20);    private static JFrame frame;     // Método principal do programa    public static void main(String[] args) {    	    	 // Configura o frame da interface gráfica        frame = new JFrame("Sistema de Gerenciamento de Ônibus");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.getContentPane().add(new JScrollPane(textarea));        frame.pack();        frame.setVisible(false);                int escolha;        // Loop principal para apresentar o menu de opções ao usuário     do {         String[] options = {"Adicionar Funcionário", "Adicionar Ônibus", "Adicionar Linha de Ônibus",                 "Excluir Funcionário", "Excluir Ônibus", "Excluir Linha de Ônibus",                 "Mostrar Todos os Funcionários", "Mostrar Todos os Ônibus",                 "Mostrar Todas as Linhas", "Sair"};         escolha = JOptionPane.showOptionDialog(null, frame.getContentPane(), "Escolha uma opção:", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);         // Executa a ação de acordo com a escolha do usuário         switch (escolha) {             case 0:                 adicionarFuncionario();                 break;             case 1:                 adicionarOnibus();                 break;             case 2:                 adicionarLinha();                 break;             case 3:                 excluirFuncionario();                 break;             case 4:                 excluirOnibus();                 break;             case 5:                 excluirLinha();                 break;             case 6:                 mostrarTodosFuncionarios();                 break;             case 7:                 mostrarTodosOnibus();                 break;             case 8:                 mostrarTodasLinhas();                 break;             case 9:                 JOptionPane.showMessageDialog(null, "Saindo do programa.");                 break;             default:                 JOptionPane.showMessageDialog(null, "Opção inválida!");                 break;         }     } while (escolha != 9);    }        // Método para excluir um funcionário    private static void excluirFuncionario() {        String cpf = JOptionPane.showInputDialog("Digite o CPF do funcionário a ser excluído:");                // Procura o funcionário pelo CPF        Funcionario funcionarioParaExcluir = null;        for (Funcionario funcionario : funcionarios) {            if (funcionario.getCpf().equals(cpf)) {                funcionarioParaExcluir = funcionario;                break;            }        }                // Remove o funcionário, se encontrado        if (funcionarioParaExcluir != null) {            funcionarios.remove(funcionarioParaExcluir);            JOptionPane.showMessageDialog(null, "Funcionário excluído com sucesso!");            mostrarTodosFuncionarios();        } else {            JOptionPane.showMessageDialog(null, "Funcionário não encontrado.");        }    }    // Método para excluir um ônibus    private static void excluirOnibus() {        String placa = JOptionPane.showInputDialog("Digite a placa do ônibus a ser excluído:");                // Procura o ônibus pela placa        Onibus onibusParaExcluir = null;        for (Onibus onibus : onibusList) {            if (onibus.getPlaca().equals(placa)) {                onibusParaExcluir = onibus;                break;            }        }                // Remove o ônibus, se encontrado        if (onibusParaExcluir != null) {            onibusList.remove(onibusParaExcluir);            JOptionPane.showMessageDialog(null, "Ônibus excluído com sucesso!");            mostrarTodosOnibus();        } else {            JOptionPane.showMessageDialog(null, "Ônibus não encontrado.");        }    }    // Método para excluir uma linha de ônibus    private static void excluirLinha() {        String id = JOptionPane.showInputDialog("Digite o ID da linha de ônibus a ser excluída:");                // Procura a linha de ônibus pelo ID        Linha linhaParaExcluir = null;        for (Linha linha : linhas) {            if (linha.getId().equals(id)) {                linhaParaExcluir = linha;                break;            }        }                // Remove a linha de ônibus, se encontrada        if (linhaParaExcluir != null) {            linhas.remove(linhaParaExcluir);            JOptionPane.showMessageDialog(null, "Linha de ônibus excluída com sucesso!");            mostrarTodasLinhas();        } else {            JOptionPane.showMessageDialog(null, "Linha de ônibus não encontrada.");        }    }           // cadastra o funcionário    private static void adicionarFuncionario() {        String nome = JOptionPane.showInputDialog("Digite o nome do funcionário:");        String cpf = JOptionPane.showInputDialog("Digite o CPF do funcionário:");        String cargo = JOptionPane.showInputDialog("Digite o cargo do funcionário:");        String id = JOptionPane.showInputDialog("Digite o ID do funcionário:");        String idade = JOptionPane.showInputDialog("Digite a idade do funcionário:");        String turno = JOptionPane.showInputDialog("Digite o turno do funcionário:");        Funcionario funcionario = new Funcionario(nome, cpf, cargo, id, idade, turno);        funcionarios.add(funcionario);        mostrarTodosFuncionarios();    }    // cadastra o ônibus    private static void adicionarOnibus() {        String nome = JOptionPane.showInputDialog("Digite o nome do ônibus:");        String placa = JOptionPane.showInputDialog("Digite a placa do ônibus:");        String status = JOptionPane.showInputDialog("Digite o status do ônibus:");        int numeroDeSerie = Integer.parseInt(JOptionPane.showInputDialog("Digite o número de série:"));        String possuiAr = JOptionPane.showInputDialog("O ônibus possui ar condicionado? (sim/não):");        String idVeiculo = JOptionPane.showInputDialog("Digite o ID do veículo:");        Onibus onibus = new Onibus(nome, placa, status, numeroDeSerie, possuiAr, idVeiculo);        onibusList.add(onibus);        mostrarTodosOnibus();    }    // cadastra a linha de ônibus    private static void adicionarLinha() {        String nome = JOptionPane.showInputDialog("Digite o nome da linha:");        String id = JOptionPane.showInputDialog("Digite o ID da linha:");        Linha linha = new Linha(nome, id);        linhas.add(linha);        mostrarTodasLinhas();    }    // mostra todos os funcionários    private static void mostrarTodosFuncionarios() {        StringBuilder funcionariosStr = new StringBuilder("Funcionários:\n");        for (Funcionario funcionario : funcionarios) {            funcionariosStr.append(funcionario).append("\n");        }        textarea.setText(funcionariosStr.toString());    }    // mostra todos os ônibus    private static void mostrarTodosOnibus() {        StringBuilder onibusStr = new StringBuilder("Ônibus:\n");        for (Onibus onibus : onibusList) {            onibusStr.append(onibus).append("\n");        }        textarea.setText(onibusStr.toString());    }    // mostra todas as linhas    private static void mostrarTodasLinhas() {        StringBuilder linhasStr = new StringBuilder("Linhas de Ônibus:\n");        for (Linha linha : linhas) {            linhasStr.append(linha).append("\n");        }        textarea.setText(linhasStr.toString());    }    // Classe para representar uma linha de ônibus    static class Funcionario {        private String nome;        private String cpf;        private String cargo;        private String id;        private String idade;        private String turno;     // Construtor da classe funcionário        public Funcionario(String nome, String cpf, String cargo, String id, String idade, String turno) {            this.nome = nome;            this.cpf = cpf;            this.cargo = cargo;            this.id = id;            this.idade = idade;            this.turno = turno;        }                // Método getter para obter o a cpf do funcionário        public String getCpf() {            return cpf;        }        // Método toString para representar fincionàrio como uma string        @Override        public String toString() {            return "Nome: " + nome + "\nCPF: " + cpf + "\nCargo: " + cargo + "\nID: " + id + "\nIdade: " + idade + "\nTurno: " + turno;        }    }    // Classe para representar uma linha de ônibus    static class Onibus {        private String nome;        private String placa;        private String status;        private int numeroDeSerie;        private String possuiAr;        private String idVeiculo;          // Construtor da classe onibus        public Onibus(String nome, String placa, String status, int numeroDeSerie, String possuiAr, String idVeiculo) {            this.nome = nome;            this.placa = placa;            this.status = status;            this.numeroDeSerie = numeroDeSerie;            this.possuiAr = possuiAr;            this.idVeiculo = idVeiculo;        }                // Método getter para obter o a placa do onibus        public String getPlaca() {            return placa;        }     // Método toString para representar onibus como uma string        @Override        public String toString() {            return "Nome: " + nome + "\nPlaca: " + placa + "\nStatus: " + status + "\nNúmero de Série: " + numeroDeSerie + "\nPossui Ar: " + possuiAr + "\nID Veículo: " + idVeiculo;        }    }  // Classe para representar uma linha de ônibus    static class Linha {        private String nome;        private String id;     // Construtor da classe Linha        public Linha(String nome, String id) {            this.nome = nome;            this.id = id;        }                // Método getter para obter o ID da linha        public String getId() {            return id;        }                // Método toString para representar a linha como uma string        @Override        public String toString() {            return "Nome: " + nome + "\nID: " + id;                             }    }     }